version: "3.9"

services:
  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-sara2020}
      POSTGRES_DB: ${DB_NAME:-users}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    restart: always
    volumes:
      - mongo_data:/data/db
    networks:
      - backend

  service-first:
    build:
      context: ./first
      dockerfile: Dockerfile
    depends_on:
      - db
    environment:
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-sara2020}@db:5432/${DB_NAME:-users}
    ports:
      - "8001:8001"
    volumes:
      - ./first:/app
    command: ["python", "main.py"]
    networks:
      - backend

  service-zero:
    build:
      context: ./zero
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENV_VAR_ZERO=value6
    restart: always
    networks:
      - backend

  service-login:
    build:
      context: ./login
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:sara2020@db:5432/users
      - ENV_VAR_LOGIN=value5
    ports:
      - "8002:8002"
    depends_on:
      - db
    restart: always
    networks:
      - backend

  service-second:
    build:
      context: ./second/demo
      dockerfile: Dockerfile
    depends_on:
      - mongo
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/event_listings
      - ENV_VAR_SECOND=value2
    ports:
      - "8080:8080"
    restart: always
    networks:
      - backend

volumes:
  postgres_data:
  mongo_data:

networks:
  backend:
    driver: bridge
